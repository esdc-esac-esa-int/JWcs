# "handlers" specifies a comma separated list of log Handler 
# classes. These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.

    handlers = java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers. For any given facility this global level
# can be overriden by a facility-specific level.
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.

    .level = ALL

# Limit the messages that are printed on the console using these setting:

    java.util.logging.ConsoleHandler.level = OFF

# Override the logging levels for specific packages: 

    sun.awt.level = OFF
    java.awt.level = OFF 
    javax.level = OFF

# The formatting can be customized by specifying the format string in the 
# java.util.logging.SimpleFormatter.format property. The given LogRecord will be 
# formatted as if by calling:
#
#    String.format(format, date, source, logger, level, message, thrown);
# 
# where the arguments are:
#
#         format    - the java.util.Formatter format string specified in the 
#                     java.util.logging.SimpleFormatter.format property or the default format.
#    (%1$tc) date   - a Date object representing event time of the log record.
#    (%2$s) source  - a string representing the caller, if available; otherwise, the logger's name.
#    (%3$s) logger  - the logger's name.
#    (%4$s) level   - the log level.
#    (%5$s) message - the formatted log message returned from the Formatter.formatMessage(LogRecord) method. 
#                     It uses java.text formatting and does not use the java.util.Formatter format argument.
#    (%6$s) thrown  - a string representing the throwable associated with the log record and its backtrace 
#                     beginning with a newline character, if any; otherwise, an empty string.
# Examples:
#
#    java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n
#
# This prints 1 line with the log level (4$), the log message (5$) and the timestamp (1$) in a square bracket.
#
#     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]
#     
#   java.util.logging.SimpleFormatter.format=%1$tc %2$s%n%4$s: %5$s%6$s%n
#
# This prints 2 lines where the first line includes the timestamp (1$) and the source (2$); 
# the second line includes the log level (4$) and the log message (5$) followed with the throwable 
# and its backtrace (6$), if any:
#
#     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal
#     SEVERE: several message with an exception
#     java.lang.IllegalArgumentException: invalid argument
#             at MyClass.mash(MyClass.java:9)
#             at MyClass.crunch(MyClass.java:6)
#            at MyClass.main(MyClass.java:3)
#

    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.SimpleFormatter.format=%4$s [%2$s]: %5$s %6$s%n

