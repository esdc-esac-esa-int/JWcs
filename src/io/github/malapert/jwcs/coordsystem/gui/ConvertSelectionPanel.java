/*
 * Copyright (C) 2016 malapert
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package io.github.malapert.jwcs.coordsystem.gui;

import io.github.malapert.jwcs.coordsystem.Ecliptic;
import io.github.malapert.jwcs.coordsystem.Equatorial;
import io.github.malapert.jwcs.coordsystem.FK4;
import io.github.malapert.jwcs.coordsystem.FK4_NO_E;
import io.github.malapert.jwcs.coordsystem.FK5;
import io.github.malapert.jwcs.coordsystem.Galactic;
import io.github.malapert.jwcs.coordsystem.ICRS;
import io.github.malapert.jwcs.coordsystem.J2000;
import io.github.malapert.jwcs.coordsystem.ReferenceSystemInterface;
import io.github.malapert.jwcs.coordsystem.ReferenceSystemInterface.Type;
import io.github.malapert.jwcs.coordsystem.SkyPosition;
import io.github.malapert.jwcs.coordsystem.SkySystem;
import io.github.malapert.jwcs.coordsystem.SkySystem.SkySystems;
import io.github.malapert.jwcs.coordsystem.SuperGalactic;
import java.awt.BorderLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;

/**
 *
 * @author malapert
 */
public class ConvertSelectionPanel extends javax.swing.JPanel {
    
    private static final String DEFAULT_PRECISION = "%.12f";
    
    private String precision = DEFAULT_PRECISION;

    /**
     * Creates new form ConvertSelectionPanel
     */
    public ConvertSelectionPanel() {
        initComponents();
        orginSkySystem.setModel(new DefaultComboBoxModel<>(SkySystems.getSkySystemsName()));
        targetSkySystem.setModel(new DefaultComboBoxModel<>(SkySystems.getSkySystemsName()));
        originRf.setModel(new DefaultComboBoxModel<>(Type.ReferenceFramesName()));
        targetRf.setModel(new DefaultComboBoxModel<>(Type.ReferenceFramesName()));
        setEnableReferenceFrame(SkySystems.values()[0].hasReferenceFrame(), true);
        setEnableReferenceFrame(SkySystems.values()[0].hasReferenceFrame(), false);
        setEnableReferenceFrameParameter(Type.ReferenceFramesName()[0], true);
        setEnableReferenceFrameParameter(Type.ReferenceFramesName()[0], false);
        this.errorMsg.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        orginSkySystem = new javax.swing.JComboBox<>();
        orginSkySLabel = new javax.swing.JLabel();
        originRfLabel = new javax.swing.JLabel();
        originRf = new javax.swing.JComboBox<>();
        originEquinoxLabel = new javax.swing.JLabel();
        originEquinox = new javax.swing.JTextField();
        originEpochLabel = new javax.swing.JLabel();
        originEpoch = new javax.swing.JTextField();
        targetSkySLabel = new javax.swing.JLabel();
        targetSkySystem = new javax.swing.JComboBox<>();
        targetRfLabel = new javax.swing.JLabel();
        targetRf = new javax.swing.JComboBox<>();
        targetEquinoxLabel = new javax.swing.JLabel();
        targetEquinox = new javax.swing.JTextField();
        targetEpochLabel = new javax.swing.JLabel();
        targetEpoch = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        originLong = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        originLat = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        targetLong = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        targetLat = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        convertButton = new javax.swing.JButton();
        errorMsg = new javax.swing.JLabel();

        jSeparator1.setBackground(new java.awt.Color(247, 125, 25));
        jSeparator1.setForeground(new java.awt.Color(247, 125, 25));
        jSeparator1.setOpaque(true);

        orginSkySystem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Equatorial", "Ecliptic", "Galactic", "Super Galactic" }));
        orginSkySystem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                orginSkySystemItemStateChanged(evt);
            }
        });
        orginSkySystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orginSkySystemActionPerformed(evt);
            }
        });

        orginSkySLabel.setText("Origin sky system");

        originRfLabel.setText("Reference frame");

        originRf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ICRS", "FK5", "FK4", "FK4_NO_E", "J2000" }));
        originRf.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                originRfItemStateChanged(evt);
            }
        });

        originEquinoxLabel.setText("Equinox");
        originEquinoxLabel.setEnabled(false);

        originEquinox.setText("2000.0");
        originEquinox.setEnabled(false);

        originEpochLabel.setText("Epoch");
        originEpochLabel.setEnabled(false);

        originEpoch.setText("1950");
        originEpoch.setEnabled(false);
        originEpoch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originEpochActionPerformed(evt);
            }
        });

        targetSkySLabel.setText("Target sky system");

        targetSkySystem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Equatorial", "Ecliptic", "Galactic", "Super Galactic" }));
        targetSkySystem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                targetSkySystemItemStateChanged(evt);
            }
        });

        targetRfLabel.setText("Reference frame");

        targetRf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ICRS", "FK5", "FK4", "FK4_NO_E", "J2000" }));
        targetRf.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                targetRfItemStateChanged(evt);
            }
        });

        targetEquinoxLabel.setText("Equinox");
        targetEquinoxLabel.setEnabled(false);

        targetEquinox.setText("2000.0");
        targetEquinox.setEnabled(false);

        targetEpochLabel.setText("Epoch");
        targetEpochLabel.setEnabled(false);

        targetEpoch.setText("1950");
        targetEpoch.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        jLabel9.setText("Sky position :");

        originLong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                originLongKeyReleased(evt);
            }
        });

        jLabel10.setText(",");

        originLat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                originLatKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(247, 125, 25));
        jLabel11.setText("=>");

        targetLong.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        targetLong.setEnabled(false);

        jLabel12.setText(",");

        targetLat.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        targetLat.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Ubuntu", 1, 20)); // NOI18N
        jLabel13.setText("                    Sky system converter");

        convertButton.setText("Convert");
        convertButton.setEnabled(false);
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        errorMsg.setForeground(new java.awt.Color(237, 27, 27));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(orginSkySystem, 0, 293, Short.MAX_VALUE)
                                        .addComponent(orginSkySLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(originRfLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(originRf, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(originEquinoxLabel)
                                            .addComponent(originEpochLabel))
                                        .addGap(29, 29, 29)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(originEquinox, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                            .addComponent(originEpoch))))
                                .addGap(49, 49, 49)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(98, 98, 98)
                                        .addComponent(targetLong, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(targetLat, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(92, 92, 92)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(targetSkySLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(targetSkySystem, 0, 297, Short.MAX_VALUE)
                                            .addComponent(targetRfLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(targetRf, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(167, 167, 167)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(targetEquinoxLabel)
                                            .addComponent(targetEpochLabel))
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(targetEquinox)
                                            .addComponent(targetEpoch, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(originLong, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel10)
                                .addGap(3, 3, 3)
                                .addComponent(originLat, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(27, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(orginSkySLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(orginSkySystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27)
                            .addComponent(originRfLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(originRf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(originEquinoxLabel)
                                .addComponent(originEquinox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(originEpochLabel)
                                .addComponent(originEpoch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(5, 5, 5))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(targetSkySLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(targetSkySystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(33, 33, 33)
                            .addComponent(targetRfLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(targetRf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(22, 22, 22)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(targetEquinoxLabel)
                                .addComponent(targetEquinox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(targetEpochLabel)
                                .addComponent(targetEpoch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(targetLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(originLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(originLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(targetLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorMsg))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orginSkySystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orginSkySystemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orginSkySystemActionPerformed

    private void originEpochActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originEpochActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_originEpochActionPerformed

    private void orginSkySystemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_orginSkySystemItemStateChanged
        try {
            if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                updateMenuBySkySystem(true);
            }
        } catch (RuntimeException ex) {
            this.errorMsg.setText(ex.getMessage());
        }
    }//GEN-LAST:event_orginSkySystemItemStateChanged

    private void originLongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_originLongKeyReleased
        try {
            updateConvertButton();
        } catch (RuntimeException ex) {
            this.errorMsg.setText(ex.getMessage());
        }
    }//GEN-LAST:event_originLongKeyReleased

    private void originLatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_originLatKeyReleased
        try {
            updateConvertButton();
        } catch (RuntimeException ex) {
            this.errorMsg.setText(ex.getMessage());
        }
    }//GEN-LAST:event_originLatKeyReleased

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        try {
            convertToTargetSkySystem();
        } catch (RuntimeException ex) {
            this.errorMsg.setText(ex.getMessage());
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    private void targetSkySystemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_targetSkySystemItemStateChanged
        try {
            if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                updateMenuBySkySystem(false);
            }
        } catch (RuntimeException ex) {
            this.errorMsg.setText(ex.getMessage());
        }
    }//GEN-LAST:event_targetSkySystemItemStateChanged

    private void originRfItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_originRfItemStateChanged
        try {
            setEnableReferenceFrameParameter(String.valueOf(this.originRf.getSelectedItem()), true);
        } catch (RuntimeException ex) {
            this.errorMsg.setText(ex.getMessage());
        }
    }//GEN-LAST:event_originRfItemStateChanged

    private void targetRfItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_targetRfItemStateChanged
        try {
            setEnableReferenceFrameParameter(String.valueOf(this.targetRf.getSelectedItem()), false);
        } catch (RuntimeException ex) {
            this.errorMsg.setText(ex.getMessage());
        }
    }//GEN-LAST:event_targetRfItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel errorMsg;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel orginSkySLabel;
    private javax.swing.JComboBox<String> orginSkySystem;
    private javax.swing.JTextField originEpoch;
    private javax.swing.JLabel originEpochLabel;
    private javax.swing.JTextField originEquinox;
    private javax.swing.JLabel originEquinoxLabel;
    private javax.swing.JTextField originLat;
    private javax.swing.JTextField originLong;
    private javax.swing.JComboBox<String> originRf;
    private javax.swing.JLabel originRfLabel;
    private javax.swing.JTextField targetEpoch;
    private javax.swing.JLabel targetEpochLabel;
    private javax.swing.JTextField targetEquinox;
    private javax.swing.JLabel targetEquinoxLabel;
    private javax.swing.JTextField targetLat;
    private javax.swing.JTextField targetLong;
    private javax.swing.JComboBox<String> targetRf;
    private javax.swing.JLabel targetRfLabel;
    private javax.swing.JLabel targetSkySLabel;
    private javax.swing.JComboBox<String> targetSkySystem;
    // End of variables declaration//GEN-END:variables

    private void setEnableReferenceFrame(boolean hasReferenceFrame, boolean isOrigin) {
        if (isOrigin) {
            this.originRf.setEnabled(hasReferenceFrame);
            this.originRfLabel.setEnabled(hasReferenceFrame);
            this.originEpoch.setEnabled(hasReferenceFrame);
            this.originEpochLabel.setEnabled(hasReferenceFrame);
            this.originEquinox.setEnabled(hasReferenceFrame);
            this.originEquinoxLabel.setEnabled(hasReferenceFrame);
            setEnableReferenceFrameParameter(String.valueOf(this.originRf.getSelectedItem()), isOrigin);
        } else {
            this.targetRf.setEnabled(hasReferenceFrame);
            this.targetRfLabel.setEnabled(hasReferenceFrame);
            this.targetEpoch.setEnabled(hasReferenceFrame);
            this.targetEpochLabel.setEnabled(hasReferenceFrame);
            this.targetEquinox.setEnabled(hasReferenceFrame);
            this.targetEquinoxLabel.setEnabled(hasReferenceFrame);
            setEnableReferenceFrameParameter(String.valueOf(this.targetRf.getSelectedItem()), isOrigin);
        }
    }

    private void updateMenuBySkySystem(boolean isOrigin) {
        String skySystemName = (isOrigin) ? (String) orginSkySystem.getSelectedItem() : (String) targetSkySystem.getSelectedItem();
        SkySystems skySystem = SkySystems.valueOfByName(skySystemName);
        setEnableReferenceFrame(skySystem.hasReferenceFrame(), isOrigin);
    }

    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(() -> {
            createWindow();
        });
    }

    public static void createWindow() {

        // create a new window
        ConvertSelectionPanel panel = new ConvertSelectionPanel();
        JFrame mapWindow = new JFrame("JWcs Converter");
        mapWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mapWindow.getContentPane().add(panel, BorderLayout.CENTER);
        mapWindow.pack();
        mapWindow.setLocationRelativeTo(null); // center on screen
        mapWindow.setVisible(true);
    }

    private void updateConvertButton() {
        if (this.originLong.getText() == null || this.originLat.getText() == null || this.originLong.getText().isEmpty() || this.originLat.getText().isEmpty()) {
            this.convertButton.setEnabled(false);
        } else {
            this.convertButton.setEnabled(true);
        }
    }

    private void convertToTargetSkySystem() {
        String originSkySystemName = orginSkySystem.getSelectedItem().toString();
        SkySystems originSkySystemC = SkySystems.valueOfByName(originSkySystemName);
        ReferenceSystemInterface originRefFrame = null;
        if (originSkySystemC.hasReferenceFrame()) {
            String refFrameName = originRf.getSelectedItem().toString();
            float equinox = (originEquinox.isEnabled()) ? Float.valueOf(originEquinox.getText()) : Float.NaN;
            float epoch = (originEpoch.isEnabled()) ? Float.valueOf(originEpoch.getText()) : Float.NaN;
            originRefFrame = createReferenceFrame(Type.valueOfByName(refFrameName), equinox, epoch);
        }
        SkySystem originSkySystem = createSkySystem(originSkySystemC, originRefFrame);

        String targetSkySystemName = targetSkySystem.getSelectedItem().toString();
        SkySystems targetSkySystemC = SkySystems.valueOfByName(targetSkySystemName);
        ReferenceSystemInterface targetRefFrame = null;
        if (targetSkySystemC.hasReferenceFrame()) {
            String refFrameName = targetRf.getSelectedItem().toString();
            float equinox = (targetEquinox.isEnabled()) ? Float.valueOf(targetEquinox.getText()) : Float.NaN;
            float epoch = (targetEpoch.isEnabled()) ? Float.valueOf(targetEpoch.getText()) : Float.NaN;
            targetRefFrame = createReferenceFrame(Type.valueOfByName(refFrameName), equinox, epoch);
        }
        SkySystem tgetSkySystem = createSkySystem(targetSkySystemC, targetRefFrame);

        double longitude = Double.valueOf(originLong.getText());
        double latitude = Double.valueOf(originLat.getText());

        SkyPosition skyPosition = originSkySystem.convertTo(tgetSkySystem, longitude, latitude);
        targetLong.setText(String.format(getPrecision(),skyPosition.getLongitude()));
        targetLat.setText(String.format(getPrecision(),skyPosition.getLatitude()));
        this.errorMsg.setText("");
    }

    private ReferenceSystemInterface createReferenceFrame(Type type, float equinox, float epoch) {
        ReferenceSystemInterface result;
        switch (type) {
            case FK4:
                result = new FK4(equinox, epoch);
                break;
            case FK4_NO_E:
                result = new FK4_NO_E(equinox, epoch);
                break;
            case FK5:
                result = new FK5(equinox);
                break;
            case ICRS:
                result = new ICRS();
                break;
            case J2000:
                result = new J2000();
                break;
            default:
                throw new IllegalArgumentException("Reference frame " + type + " is not supported");
        }
        return result;
    }

    private SkySystem createSkySystem(SkySystems name, ReferenceSystemInterface refFrame) {
        SkySystem result;
        switch (name) {
            case ECLIPTIC:
                result = new Ecliptic(refFrame);
                break;
            case EQUATORIAL:
                result = new Equatorial(refFrame);
                break;
            case GALACTIC:
                result = new Galactic();
                break;
            case SUPER_GALACTIC:
                result = new SuperGalactic();
                break;
            default:
                throw new IllegalArgumentException("SkySystem " + name + " is not supported");
        }
        return result;
    }

    private void setEnableReferenceFrameParameter(String refFrameName, boolean isOrigin) {
        Type refFrame = Type.valueOfByName(refFrameName);
        switch (refFrame) {
            case FK4:
                if (isOrigin) {
                    this.originEquinoxLabel.setEnabled(true);
                    this.originEquinox.setEnabled(true);
                    this.originEpochLabel.setEnabled(true);
                    this.originEpoch.setEnabled(true);
                } else {
                    this.targetEquinoxLabel.setEnabled(true);
                    this.targetEquinox.setEnabled(true);
                    this.targetEpochLabel.setEnabled(true);
                    this.targetEpoch.setEnabled(true);
                }
                break;
            case FK4_NO_E:
                if (isOrigin) {
                    this.originEquinoxLabel.setEnabled(true);
                    this.originEquinox.setEnabled(true);
                    this.originEpochLabel.setEnabled(true);
                    this.originEpoch.setEnabled(true);
                } else {
                    this.targetEquinoxLabel.setEnabled(true);
                    this.targetEquinox.setEnabled(true);
                    this.targetEpochLabel.setEnabled(true);
                    this.targetEpoch.setEnabled(true);
                }
                break;
            case FK5:
                if (isOrigin) {
                    this.originEquinoxLabel.setEnabled(true);
                    this.originEquinox.setEnabled(true);
                    this.originEpochLabel.setEnabled(false);
                    this.originEpoch.setEnabled(false);
                } else {
                    this.targetEquinoxLabel.setEnabled(true);
                    this.targetEquinox.setEnabled(true);
                    this.targetEpochLabel.setEnabled(false);
                    this.targetEpoch.setEnabled(false);
                }
                break;
            case ICRS:
                if (isOrigin) {
                    this.originEquinoxLabel.setEnabled(false);
                    this.originEquinox.setEnabled(false);
                    this.originEpochLabel.setEnabled(false);
                    this.originEpoch.setEnabled(false);
                } else {
                    this.targetEquinoxLabel.setEnabled(false);
                    this.targetEquinox.setEnabled(false);
                    this.targetEpochLabel.setEnabled(false);
                    this.targetEpoch.setEnabled(false);
                }
                break;
            case J2000:
                if (isOrigin) {
                    this.originEquinoxLabel.setEnabled(false);
                    this.originEquinox.setEnabled(false);
                    this.originEpochLabel.setEnabled(false);
                    this.originEpoch.setEnabled(false);
                } else {
                    this.targetEquinoxLabel.setEnabled(false);
                    this.targetEquinox.setEnabled(false);
                    this.targetEpochLabel.setEnabled(false);
                    this.targetEpoch.setEnabled(false);
                }
                break;
            default:
                throw new IllegalArgumentException("The reference fame " + refFrameName + " is not supported");
        }
    }

    /**
     * @return the precision
     */
    public String getPrecision() {
        return precision;
    }

    /**
     * @param precision the precision to set
     */
    public void setPrecision(String precision) {
        this.precision = precision;
    }

}
